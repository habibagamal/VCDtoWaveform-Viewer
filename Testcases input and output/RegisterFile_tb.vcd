$date
Wed Oct 24 15:32:57 2018
$end
$version
Icarus Verilog
$end
$timescale
1ns
$end
$scope module RegisterFile_tb $end
$var wire 32 ! rs2_data [31:0] $end
$var wire 32 " rs1_data [31:0] $end
$var reg 1 # clk $end
$var reg 5 $ rd_addr [4:0] $end
$var reg 32 % rfIN [31:0] $end
$var reg 1 & rfWrite $end
$var reg 5 ' rs1_addr [4:0] $end
$var reg 5 ( rs2_addr [4:0] $end
$var reg 1 ) rst $end
$scope module uut $end
$var wire 1 # clk $end
$var wire 5 * rd_addr [4:0] $end
$var wire 32 + rfIN [31:0] $end
$var wire 1 & rfWrite $end
$var wire 5 , rs1_addr [4:0] $end
$var wire 5 - rs2_addr [4:0] $end
$var wire 1 ) rst $end
$var wire 32 . rs2_data [31:0] $end
$var wire 32 / rs1_data [31:0] $end
$var wire 5 0 addrB [4:0] $end
$scope module RFmem $end
$var wire 5 1 addrA [4:0] $end
$var wire 5 2 addrB [4:0] $end
$var wire 1 # clk $end
$var wire 32 3 dataInA [31:0] $end
$var wire 32 4 dataInB [31:0] $end
$var wire 32 5 dataOutA [31:0] $end
$var wire 1 6 memWriteA $end
$var wire 1 & memWriteB $end
$var wire 1 ) rst $end
$var wire 32 7 dataOutB [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 7
06
bx 5
b0 4
b0 3
b0 2
b0 1
b0 0
bx /
bx .
b0 -
b0 ,
b0 +
b0 *
1)
b0 (
b0 '
0&
b0 %
b0 $
0#
bx "
bx !
$end
#5
1#
#10
b1011 !
b1011 .
b1011 7
b1011 0
b1011 2
0#
b1011 (
b1011 -
b101 "
b101 /
b101 5
b101 '
b101 ,
b101 1
0)
#15
1#
#20
b11 0
b11 2
b0 !
b0 .
b0 7
0#
1&
b11 %
b11 +
b11 4
b11 $
b11 *
#25
1#
#30
b1011 0
b1011 2
b1011 !
b1011 .
b1011 7
0#
0&
b11 "
b11 /
b11 5
b11 '
b11 ,
b11 1
#35
1#
#40
0#
#45
1#
#50
0#
#55
1#
#60
0#
#65
